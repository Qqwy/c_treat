/* RAII-style datatype usage
   The type will be automatically cleaned up once the end of `block` is reached.
   This is really helpful for objects like file handles, that really need to be closed once done with them.

   Two important notices:
   1. This only works with data types that follow Treat's data type specification.
      (Specifically: Treat needs to be able to find its destructor).
   2. Do not use `return` from inside the block, but only `break` or `continue` to skip to the end of it, because premature returns will result in the destructor not being called.

   Parameters:
   `var_decl`: A declaration of the type and name to use for the managed variable.
   `init`: A statement that returns an initial value of type `type` for `var` to receive.
   `block`: Any statement(s) to run while `var` exists.

   Example:
   ```
      T_with(TInteger * my_int, Integer.new(1234)) {
        Inspect.inspect(my_int);
      }
      // Look ma, no leaking! `my_int` is gone!
  ```
*/
#define TPimpl(x, y) x ## y
#define TP(x, y) TPimpl(x, y)


#define T_with(var_decl, init)                    \
  while(1)                                            \
    if(0)                                             \
    TP(__using_finished, __LINE__):                   \
      break;                                          \
    else                                              \
      for(void *_tmp = 0;;)                           \
        for(var_decl = _tmp = (init);;)           \
          if (0) {                                    \
          TP(__using_cleanup, __LINE__):              \
            Treat.destroy(_tmp);                      \
            goto TP(__using_finished, __LINE__);      \
          } else                                      \
            if (1) {                                  \
              goto TP(__using_body, __LINE__);        \
            } else                                    \
              while (1)                               \
                if (1){                               \
                  goto TP(__using_cleanup, __LINE__); \
                } else                                \
                TP(__using_body, __LINE__):           \

